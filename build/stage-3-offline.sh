#! /bin/bash

# Coloring and Style

COLOR_CODE_DEFAULT='\033[1;37m'
COLOR_CODE_GREEN='\033[1;32m'
COLOR_CODE_YELLOW='\033[1;33m'

user_standard() {
    echo -e "${COLOR_CODE_DEFAULT} [!] $1${COLOR_CODE_DEFAULT}"
}

user_success() {
    echo -e "${COLOR_CODE_GREEN} [SUCCESS] $1${COLOR_CODE_DEFAULT}"
}

user_warning() {
    echo -e "${COLOR_CODE_YELLOW} [WARNING] $1${COLOR_CODE_DEFAULT}"
}

user_end_of_script() {
    echo -e "${COLOR_CODE_YELLOW} [~] $1${COLOR_CODE_DEFAULT}"
}

user_alert() {
    echo -e "${COLOR_CODE_RED} [ALERT] $1${COLOR_CODE_DEFAULT}"
}
# ------------------------------------------------------------

unpack_tar() {

    tar_file="$1"

    if ! tar -xvf $tar_file  &> /dev/null; then
        user_alert "$tar_file failed to be unpacked. Verify integrity of file."
        user_alert "Exiting setup... Remediate displayed errors!"
        exit 1
    else
        user_success "$tar_file was unpacked. Continuing..."
    fi
}

assert_present() {
    for file in "$@"; do
        if [ -f "$file" ]; then
            user_success "Found file: '$file'. Continuing..."
        elif [ -d "$file" ]; then
            user_success "Found directory: '$file'. Continuing..."
        else
            user_alert "Missing '$file'. Verify the repository contains the resource."
            user_alert "Exiting setup... Remediate displayed errors!"
            exit 1
        fi
    done
}

load_docker() {

    base_image="$1"

    if ! docker load --input $base_image &> /dev/null; then
        user_alert "$base_image failed to be installed. Attempt manual install via 'docker load --input <path_to_img>'"
        user_alert "Exiting setup... Remediate displayed errors!"
        exit 1
    else
        user_success "$base_image was installed. Continuing..."
    fi
}

build_docker() {

    image_tag="$1"
    dockerfile_name="$2"

    if ! docker build --network=host -t $image_tag -f $dockerfile_name . &> /dev/null; then
        user_alert "$image_tag failed to be built. Manually save via 'docker build --network=host -t $image_tag -f $dockerfile_name .'"
        user_alert "Exiting setup... Remediate displayed errors!"
        exit 1
    else
        user_success "$image_tag was built from Dockerfile. Continuing..."
    fi
}

cat << "EOF"

   \\\\   Welcome to Stage Three! This final script unpacks and loads the
   c  oo  Tarball generated by the previous stage (containing all containers
    | .U  for the project). To run, place STAGE_THREE_BUNDLE.tar into the
   __=__  '/build' dir and execute this script to generate the shippable tar.
   Vr 1.1

EOF

# Other Files
COMPOSE_FILES="docker-compose.yml docker-compose.gpu.yml docker-compose.dev.yml"
ENV_FILE=".env"
STAGE_4_NAME="stage-4-deploy.sh"
MODELS_DIR="models"
CHINESE_MODEL="opus-mt-zh-en"
RUSSIAN_MODEL="opus-mt-ru-en"
MODELS_TAR="models.tar"

# Arbritrary Variables
VERS="v1.4"
BUILD_DIRECTORY="build"
FRONTEND_DIRECTORY="frontend"
FINAL_BUNDLE_NAME="STAGE_THREE_BUNDLE" # From Prior Stage
FINAL_BUNDLE_TAR="STAGE_THREE_BUNDLE.tar" # From Prior Stage

# Bundle to Ship
SHIP_BUNDLE_NAME="HIEROGLYPH_BUNDLE_$VERS"
SHIP_TAR="HIEROGLYPH_BUNDLE_$VERS.tar"

# DB Variables
MONGO_IMG_TAR='mongo_latest.tar.gz'
MONGO_TAG='mongo:latest'

# Hieroglyph Variables
HIERO_TAG='shell:dependencies'
HIERO_IMG_TAR='shell_dependencies.tar.gz'

# Frontend Variables
FRONT_TAG='frontend:dependencies'
FRONT_IMG_TAR='frontend_dependencies.tar.gz'

# Shippable Output Containers
OUTPUT_SERVER_TAR="hieroglyph_server_latest.tar.gz"
OUTPUT_FRONTEND_TAR='hieroglyph_frontend_latest.tar.gz'

# Tags to Use Once Containers Are Built
HIERO_FINAL_TAG="hieroglyph-server:latest"
FRONT_FINAL_TAG="hieroglyph-frontend:latest"
MONGO_FINAL_TAG='hieroglyph-database:latest'

# Unpack Stage Three Bundle
user_standard "Checking current directory for Stage Three Bundle..."
assert_present $FINAL_BUNDLE_TAR

user_standard "Preparing to unpack Stage Three Bundle..."
unpack_tar $FINAL_BUNDLE_TAR

user_standard "Checking unpacked bundle for requisite files..."
assert_present "$FINAL_BUNDLE_NAME/$HIERO_IMG_TAR" # Server
assert_present "$FINAL_BUNDLE_NAME/$MONGO_IMG_TAR" # DB
assert_present "$FINAL_BUNDLE_NAME/$FRONT_IMG_TAR" # Frontend

# Package the models
user_standard "Checking local directory for requisite models files..."
assert_present "../$MODELS_DIR/$CHINESE_MODEL" # Models
assert_present "../$MODELS_DIR/$RUSSIAN_MODEL" # Models
user_standard "Bundling tar for models directory full of containers..."
tar -cf $MODELS_TAR -C .. $MODELS_DIR/$RUSSIAN_MODEL $MODELS_DIR/$CHINESE_MODEL


# Load Image
# Runs: docker load --input STAGE_THREE_BUNDLE/shell_dependencies.tar.gz
user_standard "Loading Server docker container..."
load_docker "$FINAL_BUNDLE_NAME/$HIERO_IMG_TAR"

user_standard "Loading Frontend docker container..."
load_docker "$FINAL_BUNDLE_NAME/$FRONT_IMG_TAR"

user_standard "Loading Database docker container..."
load_docker "$FINAL_BUNDLE_NAME/$MONGO_IMG_TAR"

# Build Server Image
user_standard "Building Hieroglyph server and frontend docker containers..."
cd .. # Going Up One Level
docker-compose -f docker-compose.dev.yml build .build hieroglyph-frontend # Using the docker-compose specified Dockerfiles
cd $BUILD_DIRECTORY # Re-Enter Build Directory


# Save Final Container for Deployment
user_standard "Saving final Hieroglyph server container to current directory as $OUTPUT_SERVER_TAR..."
docker save $HIERO_FINAL_TAG | gzip > $OUTPUT_SERVER_TAR

user_standard "Saving final Hieroglyph frontend container to current directory as $OUTPUT_FRONTEND_TAR..."
docker save $FRONT_FINAL_TAG | gzip > $OUTPUT_FRONTEND_TAR

user_standard "Bundling shippable Tarball full of containers..."
tar -cf $SHIP_TAR $OUTPUT_SERVER_TAR $OUTPUT_FRONTEND_TAR $MODELS_TAR $STAGE_4_NAME
tar -rf $SHIP_TAR -C .. $COMPOSE_FILES $ENV_FILE 
tar -rf $SHIP_TAR -C $FINAL_BUNDLE_NAME $MONGO_IMG_TAR

user_success "Completed. Final shippable containers saved as $SHIP_TAR in current directory."
