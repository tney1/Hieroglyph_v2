from fastapi.testclient import TestClient
from hieroglyph.hieroglyph import app
import json
import pytest
import logging

client = TestClient(app)

def test_base_endpoint():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"status": "GOOD"}

def test_translate_endpoint():

    file_input = open('src/hieroglyph/tests/translate_payload.json', 'r', encoding='utf8')
    translate_data = json.load(file_input)

    response = client.post("/translate", json=translate_data)
    assert response.status_code == 200 # Success
    #assert response.json() == {
    #    "result": "Personnel and shift management, electronic inspection, mobile APP management, knowledge base management, process management, maintenance and maintenance, maintenance and maintenance management, emergency drills, flight logs and vendor management."
    #}

def test_translate_endpoint_missing_field():
    payload = {
            "text": "",
            "src_lang": "chinese",
            "dst_lang": "english"
        }
    response = client.post("/translate", json=payload)
    assert response.status_code == 400 # HTTP 400 Error

def test_translate_endpoint_malformed_field():
    payload = {
            "text": "人员和与值排班管理、电子巡检、移动APP管理、知识库管理、流程管理、维护保养、维修管理、应急演练、机房进出登记和供应商管理",
            "src_lang": "63466436",
            "dst_lang": "435435435"
        }
    response = client.post("/translate", json=payload)
    assert response.status_code == 400 # HTTP 400 Error

# Warning: Takes Adds ~3 Minutes to Test Time
def test_ocr_diagram_endpoint():
    file_input = open('src/hieroglyph/tests/News_One.1.json', 'r', encoding='utf8') # Generated by scripts/b64-dataify.py
    translate_data = json.load(file_input)
    response = client.post("/pipeline", json=translate_data)
    # What Else to Assert?
    assert response.status_code == 200

def test_ocr_diagram_endpoint_missing_field():

    # Remove Required Base64 Data
    payload = {
        "name": "News_One.1.json",
        "src_lang": "chinese",
        "dst_lang": "english",
        "image_type": "diagram",
        "metadata": {
          "source_document": "News_One.1.json"
        }
      }

    response = client.post("/pipeline", json=payload)
    assert response.status_code == 422

def test_ocr_diagram_endpoint_malformed_field():

    # recycles the JSON for pipeline/ because they use the same data structure
    file_input = open('src/hieroglyph/tests/text_malformed.json', 'r', encoding='utf8') # Generated by scripts/b64-dataify.py
    translate_data = json.load(file_input)
    response = client.post("/pipeline", json=translate_data)

    assert response.status_code == 400

# Warning: Takes Adds ~3 Minutes to Test Time
def test_ocr_text_endpoint():
    file_input = open('src/hieroglyph/tests/News_One.1.json', 'r', encoding='utf8') # Generated by scripts/b64-dataify.py
    translate_data = json.load(file_input)
    response = client.post("/pipeline", json=translate_data)
    # What Else to Assert?
    assert response.status_code == 200

def test_ocr_text_endpoint_missing_field():

    # Remove Required Base64 Data
    payload = {
        "name": "News_One.1.json",
        "src_lang": "chinese",
        "dst_lang": "english",
        "image_type": "text",
        "metadata": {
          "source_document": "News_One.1.json"
        }
      }

    response = client.post("/pipeline", json=payload)
    assert response.status_code == 422

def test_ocr_text_endpoint_malformed_field():

    file_input = open('src/hieroglyph/tests/text_malformed.json', 'r', encoding='utf8') # Generated by scripts/b64-dataify.py
    translate_data = json.load(file_input)
    response = client.post("/pipeline", json=translate_data)

    assert response.status_code == 400

# Warning: Takes Adds ~3 Minutes to Test Time
def test_batch_endpoint():
    file_input = open('src/hieroglyph/tests/News_One.1_and_2.json', 'r', encoding='utf8') # Generated by scripts/b64-dataify.py
    translate_data = json.load(file_input)
    response = client.post("/batch-pipeline", json=translate_data)
    # What Else to Assert?
    assert response.status_code == 200

def test_batch_endpoint_missing_field():

    file_input = open('src/hieroglyph/tests/batch_missing.json', 'r', encoding='utf8') # Generated by scripts/b64-dataify.py
    translate_data = json.load(file_input)

    response = client.post("/batch-pipeline", json=translate_data)
    assert response.status_code == 422

def test_batch_endpoint_malformed_field():
    file_input = open('src/hieroglyph/tests/batch_malformed.json', 'r', encoding='utf8') # Generated by scripts/b64-dataify.py
    translate_data = json.load(file_input)

    response = client.post("/batch-pipeline", json=translate_data)
    assert response.status_code == 400
